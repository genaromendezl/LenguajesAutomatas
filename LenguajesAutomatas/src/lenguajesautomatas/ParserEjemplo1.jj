PARSER_BEGIN(Exp)
public class Exp {
  public static void main(String args[]) throws ParseException {
    Exp parser = new Exp(System.in);
    parser.ExpressionList();   
        // Notice this calls the start symbol for the grammar
  }
}
PARSER_END(Exp)
SKIP :
{ " " | "\t" | "\n" | "\r" }
 
TOKEN :
{ < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
| < NUM: ( ["0"-"9"] )+ >
}

TOKEN : { <REAL: <NUM> ("." <NUM> )* > }

void ExpressionList() :
{ String s; float e=0; }
{ { System.out.println(
             "Please type in an expression followed by a \";\" or ^D to quit:");
          System.out.println(""); }
  ( e=Expression() ";" {System.out.println(e);})* <EOF>
}
 
float Expression() :
{ float t1=0; float t2=0; }
{ t1=Term() (( "+" t2=Term() ) { t1+=t2;  }
        |    ( "-" t2=Term() ) { t1+=t2;  })*
  { return t1; }

}
 
float Term() :
{ float f1=0; float f2=1;}
{ f1=Factor() ( "*" f2=Factor() { f1*=f2;}
              | "/" f2=Factor() { f1/=f2;})* 
  { return f1;}
}
 
float Factor() :
{ Token t; String s; float valor=0;}
{ t=<ID>
        { System.out.println("Just read a " +t.image);
            return valor;
         }
| t=<NUM>
        { valor = Float.parseFloat(t.image); return valor; }
| t=<REAL>
        { valor = Float.parseFloat(t.image);  return valor;}
| "(" Expression() ")"
        { return valor;        }
}